{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carlos\\\\documents\\\\react_apps\\\\meteologica_app\\\\client\\\\src\\\\components\\\\Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport Plotly from 'plotly.js-basic-dist';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Plot = createPlotlyComponent(Plotly);\n_c = Plot;\nconst ENDPOINT = \"http://127.0.0.1:4001\"; // const plotGlobalLayout = {}\n\nconst globalColor = '#111d2b';\n\nfunction App() {\n  _s();\n\n  const [temperatures, setTemperatures] = useState([]);\n  const [power, setPower] = useState([]);\n  const [onLight, setOnLight] = useState(false);\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    socket.on(\"FromAPI\", resp => {\n      setTemperatures(resp.updatedTemperatures);\n      setPower(resp.updatedPowers);\n      setOnLight(true);\n    });\n  }, []);\n\n  const makeAxis = rawData => {\n    const xAxis = rawData.map(each => each.time);\n    const yAxis = rawData.map(each => each.value);\n    const plotData = [xAxis, yAxis];\n    return plotData;\n  };\n\n  const tempsInCelsius = kelvinTemperatures => {\n    const convertedTemperatures = kelvinTemperatures.map(each => {\n      const celsius = each - 273.15;\n      return celsius;\n    });\n    return convertedTemperatures;\n  };\n\n  const toKW = MWpowers => {\n    const KWpowers = MWpowers.map(each => {\n      return each * 1000;\n    });\n    return KWpowers;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [onLight ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Connected! receiving data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 51\n    }, this), /*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        type: 'scatter',\n        mode: 'lines',\n        x: makeAxis(temperatures)[0],\n        y: tempsInCelsius(makeAxis(temperatures)[1])\n      }],\n      layout: {\n        title: 'Temperature',\n        font: {\n          color: 'white'\n        },\n        xaxis: {\n          title: 'Time',\n          titlefont: {\n            color: 'white'\n          },\n          tickfont: {\n            color: 'white'\n          },\n          tickmode: 'linear',\n          dtick: 12,\n          tickformat: '%M'\n        },\n        yaxis: {\n          title: 'Temp (CÂ°)',\n          titlefont: {\n            color: 'white'\n          },\n          tickfont: {\n            color: 'white'\n          }\n        },\n        paper_bgcolor: globalColor,\n        plot_bgcolor: globalColor\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        type: 'scatter',\n        mode: 'lines',\n        x: makeAxis(power)[0],\n        y: toKW(makeAxis(power)[1])\n      }],\n      layout: {\n        title: 'Power',\n        font: {\n          color: 'white'\n        },\n        xaxis: {\n          title: 'Time',\n          titlefont: {\n            color: 'white'\n          },\n          tickfont: {\n            color: 'white'\n          },\n          tickmode: 'linear',\n          dtick: 12,\n          tickformat: '%M'\n        },\n        yaxis: {\n          title: 'Power (KW)',\n          titlefont: {\n            color: 'white'\n          },\n          tickfont: {\n            color: 'white'\n          }\n        },\n        paper_bgcolor: globalColor,\n        plot_bgcolor: globalColor\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"jgKKQ1xo31WQ5GmnARJpyu8xpUY=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Plot\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/carlos/documents/react_apps/meteologica_app/client/src/components/Chart.js"],"names":["React","useState","useEffect","socketIOClient","Plotly","createPlotlyComponent","Plot","ENDPOINT","globalColor","App","temperatures","setTemperatures","power","setPower","onLight","setOnLight","socket","on","resp","updatedTemperatures","updatedPowers","makeAxis","rawData","xAxis","map","each","time","yAxis","value","plotData","tempsInCelsius","kelvinTemperatures","convertedTemperatures","celsius","toKW","MWpowers","KWpowers","display","type","mode","x","y","title","font","color","xaxis","titlefont","tickfont","tickmode","dtick","tickformat","yaxis","paper_bgcolor","plot_bgcolor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport Plotly from 'plotly.js-basic-dist';\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\n\r\nconst Plot = createPlotlyComponent(Plotly);\r\nconst ENDPOINT = \"http://127.0.0.1:4001\";\r\n// const plotGlobalLayout = {}\r\nconst globalColor = '#111d2b'\r\n\r\n\r\nfunction App() {\r\n\r\n    const [temperatures, setTemperatures] = useState([]);\r\n    const [power, setPower] = useState([]);\r\n    const [onLight, setOnLight] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        const socket = socketIOClient(ENDPOINT);\r\n        socket.on(\"FromAPI\", resp => {\r\n            setTemperatures(resp.updatedTemperatures);\r\n            setPower(resp.updatedPowers);\r\n            setOnLight(true)\r\n        });\r\n    }, []);\r\n\r\n\r\n    const makeAxis = (rawData) =>{\r\n        const xAxis = rawData.map((each)=>(\r\n            each.time\r\n        ))\r\n        const yAxis = rawData.map((each)=>(\r\n            each.value\r\n        ))\r\n\r\n        const plotData = [xAxis,yAxis]\r\n\r\n        return plotData;\r\n    }\r\n\r\n    const tempsInCelsius =(kelvinTemperatures) =>{\r\n        const convertedTemperatures = kelvinTemperatures.map(each=>{\r\n            const celsius = each - 273.15\r\n            return (celsius)\r\n        })\r\n        return convertedTemperatures\r\n    }\r\n\r\n    const toKW = (MWpowers) =>{\r\n        const KWpowers= MWpowers.map(each=>{\r\n            return each*1000\r\n        })\r\n        return KWpowers\r\n    }\r\n\r\n\r\n\r\n  return (\r\n\r\n    <div style={{display:'flex'}}>\r\n        {onLight?<p>Connected! receiving data</p>:<p>loading...</p>}\r\n        <Plot\r\n            data={[\r\n                {\r\n                    type:'scatter',\r\n                    mode:'lines',\r\n                    x:makeAxis(temperatures)[0],\r\n                    y:tempsInCelsius(makeAxis(temperatures)[1])\r\n                }\r\n            ]}\r\n\r\n            layout={{\r\n                title:'Temperature',\r\n                font:{\r\n                    color:'white'\r\n                },\r\n                xaxis:{\r\n                    title:'Time',\r\n                    titlefont:{color:'white'},\r\n                    tickfont:{color:'white'},\r\n                    tickmode:'linear',\r\n                    dtick:12,\r\n                    tickformat:'%M'\r\n                },\r\n                yaxis:{\r\n                    title:'Temp (CÂ°)',\r\n                    titlefont:{color:'white'},\r\n                    tickfont:{color:'white'}\r\n                },\r\n                paper_bgcolor:globalColor,\r\n                plot_bgcolor:globalColor,\r\n            }}\r\n        />\r\n        <Plot\r\n            data={[\r\n                {\r\n                    type:'scatter',\r\n                    mode:'lines',\r\n                    x:makeAxis(power)[0],\r\n                    y:toKW(makeAxis(power)[1]),\r\n                }\r\n            ]}\r\n            layout={{\r\n                title:'Power',\r\n                font:{\r\n                    color:'white'\r\n                },\r\n                xaxis:{\r\n                    title:'Time',\r\n                    titlefont:{color:'white'},\r\n                    tickfont:{color:'white'},\r\n                    tickmode:'linear',\r\n                    dtick:12,\r\n                    tickformat:'%M'\r\n                },\r\n                yaxis:{\r\n                    title:'Power (KW)',\r\n                    titlefont:{color:'white'},\r\n                    tickfont:{color:'white'}\r\n                },\r\n                paper_bgcolor:globalColor,\r\n                plot_bgcolor:globalColor,\r\n\r\n            }}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}