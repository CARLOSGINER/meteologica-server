{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carlos\\\\documents\\\\react_apps\\\\meteologica_app\\\\client\\\\src\\\\components\\\\Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport Plotly from 'plotly.js-basic-dist';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Plot = createPlotlyComponent(Plotly);\n_c = Plot;\nconst ENDPOINT = \"http://127.0.0.1:4001\";\n\nfunction App() {\n  _s();\n\n  const [temperatures, setTemperatures] = useState([]);\n  const [power, setPower] = useState([]);\n  const [count, setCount] = useState(0);\n  const limitXaxis = {\n    yaxis: {\n      range: [500, 3000]\n    },\n    xaxis: {\n      range: [count - 100, count]\n    }\n  };\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    socket.on(\"FromAPI\", resp => {\n      setTemperatures(resp.updatedTemperatures);\n      setPower(resp.updatedPowers);\n      setCount(prevCount => prevCount + 1);\n    });\n  }, []);\n\n  const makeAxis = rawData => {\n    const xAxis = rawData.map(each => each.time);\n    const yAxis = rawData.map(each => each.value);\n    const plotData = [xAxis, yAxis];\n    return plotData;\n  };\n\n  const tempsInCelsius = kelvinTemperatures => {\n    const convertedTemperatures = kelvinTemperatures.map(each => {\n      const celsius = each - 273.15;\n      return celsius;\n    });\n    return convertedTemperatures;\n  };\n\n  const toKW = MWpowers => {\n    const KWpowers = MWpowers.map(each => {\n      return each * 1000;\n    });\n    return KWpowers;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        type: 'scatter',\n        mode: 'lines',\n        x: makeAxis(temperatures)[0],\n        y: tempsInCelsius(makeAxis(temperatures)[1])\n      }] // layout={\n      //     count>100?{xaxis:{range:[count-100,count]}}:\"\"\n      // }\n      ,\n      layout: count > 100 ? limitXaxis : {\n        yaxis: {\n          range: [500, 3000]\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        type: 'scatter',\n        mode: 'lines',\n        x: makeAxis(power)[0],\n        y: toKW(makeAxis(power)[1])\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"qgf2s6lqeQIQeq45qL92ZtR+OQA=\");\n\n_c2 = App;\nexport default App; // // FUNCIONANDO EN COMPONENTE CLASE\n// import React, { Component } from \"react\";\n// // import Plotly from 'plotly.js-basic-dist';\n// // import createPlotlyComponent from 'react-plotly.js/factory';\n// import socketIOClient from \"socket.io-client\";\n// // const Plot = createPlotlyComponent(Plotly);\n// class App extends Component {\n//     constructor() {\n//       super();\n//       this.state = {\n//         response: false,\n//         endpoint: \"http://127.0.0.1:4001\"\n//       };\n//     }\n//   componentDidMount() {\n//       const { endpoint } = this.state;\n//       const socket = socketIOClient(endpoint);\n//       socket.on(\"FromAPI\", updatedTemperatures => this.setState({ response: updatedTemperatures }));\n//     }\n//   render() {\n//       const { response } = this.state;\n//       return (\n//         <div style={{ textAlign: \"center\" }}>\n//           {response ?\n//               response.map((obj)=>{\n//                 return <p key={obj.time}>time : {obj.time}</p>\n//               })\n//           : <p>Loading...</p>}\n//         </div>\n//       );\n//     }\n//   }\n//   export default App;\n// TOMAR DE AQUI EL PLOT\n//   import React, {useEffect,useState} from 'react';\n// export default function Chart() {\n//     const [temperatures, setTemperatures] = useState([]);\n//     const [power, setPower] = useState([]);\n//     useEffect(()=>{\n//       fetchData();\n//     },[])\n//     const fetchData = async () =>{\n//       //here Im fetching data from Express server specified endpoint\n//       const data = await fetch(\"/data\");\n//       const _data = await data.json();\n//       setTemperatures(_data.temperature.values);\n//       setPower(_data.power.values)\n//     }\n//     const makeAxis = (rawData) =>{\n//         const xAxis = rawData.map((each)=>(\n//             each.time\n//         ))\n//         const yAxis = rawData.map((each)=>(\n//             each.value\n//         ))\n//         const plotData = [xAxis,yAxis]\n//         return plotData;\n//     }\n//     return (\n//         <div>\n//             <Plot\n//                 data={[\n//                     {\n//                         type:'scatter',\n//                         mode:'lines',\n//                         x:makeAxis(temperatures)[0],\n//                         y:makeAxis(temperatures)[1]\n//                     }\n//                 ]}\n//             />\n//             <Plot\n//                 data={[\n//                     {\n//                         type:'scatter',\n//                         mode:'lines',\n//                         x:makeAxis(power)[0],\n//                         y:makeAxis(power)[1]\n//                     }\n//                 ]}\n//             />\n//         </div>\n//     )\n// }\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Plot\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/carlos/documents/react_apps/meteologica_app/client/src/components/Chart.js"],"names":["React","useState","useEffect","socketIOClient","Plotly","createPlotlyComponent","Plot","ENDPOINT","App","temperatures","setTemperatures","power","setPower","count","setCount","limitXaxis","yaxis","range","xaxis","socket","on","resp","updatedTemperatures","updatedPowers","prevCount","makeAxis","rawData","xAxis","map","each","time","yAxis","value","plotData","tempsInCelsius","kelvinTemperatures","convertedTemperatures","celsius","toKW","MWpowers","KWpowers","display","type","mode","x","y"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport Plotly from 'plotly.js-basic-dist';\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\n\r\nconst Plot = createPlotlyComponent(Plotly);\r\nconst ENDPOINT = \"http://127.0.0.1:4001\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const [temperatures, setTemperatures] = useState([]);\r\n    const [power, setPower] = useState([]);\r\n    const [count, setCount] = useState(0);\r\n\r\n    const limitXaxis = {\r\n        yaxis:{\r\n            range:[500,3000]\r\n        },\r\n        xaxis:{\r\n            range:[count-100,count]\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const socket = socketIOClient(ENDPOINT);\r\n        socket.on(\"FromAPI\", resp => {\r\n            setTemperatures(resp.updatedTemperatures);\r\n            setPower(resp.updatedPowers);\r\n            setCount(prevCount=>prevCount+1)\r\n        });\r\n    }, []);\r\n\r\n\r\n    const makeAxis = (rawData) =>{\r\n        const xAxis = rawData.map((each)=>(\r\n            each.time\r\n        ))\r\n        const yAxis = rawData.map((each)=>(\r\n            each.value\r\n        ))\r\n\r\n        const plotData = [xAxis,yAxis]\r\n\r\n        return plotData;\r\n    }\r\n\r\n    const tempsInCelsius =(kelvinTemperatures) =>{\r\n        const convertedTemperatures = kelvinTemperatures.map(each=>{\r\n            const celsius = each - 273.15\r\n            return (celsius)\r\n        })\r\n        return convertedTemperatures\r\n    }\r\n\r\n    const toKW = (MWpowers) =>{\r\n        const KWpowers= MWpowers.map(each=>{\r\n            return each*1000\r\n        })\r\n        return KWpowers\r\n    }\r\n\r\n\r\n  return (\r\n    <div style={{display:'flex'}}>\r\n        <Plot\r\n            data={[\r\n                {\r\n                    type:'scatter',\r\n                    mode:'lines',\r\n                    x:makeAxis(temperatures)[0],\r\n                    y:tempsInCelsius(makeAxis(temperatures)[1])\r\n                }\r\n            ]}\r\n\r\n            // layout={\r\n            //     count>100?{xaxis:{range:[count-100,count]}}:\"\"\r\n            // }\r\n\r\n            layout={count>100?limitXaxis:{\r\n                yaxis:{\r\n                    range:[500,3000]\r\n                }\r\n            }}\r\n        />\r\n        <Plot\r\n            data={[\r\n                {\r\n                    type:'scatter',\r\n                    mode:'lines',\r\n                    x:makeAxis(power)[0],\r\n                    y:toKW(makeAxis(power)[1])\r\n                }\r\n            ]}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // FUNCIONANDO EN COMPONENTE CLASE\r\n\r\n\r\n// import React, { Component } from \"react\";\r\n// // import Plotly from 'plotly.js-basic-dist';\r\n// // import createPlotlyComponent from 'react-plotly.js/factory';\r\n// import socketIOClient from \"socket.io-client\";\r\n\r\n// // const Plot = createPlotlyComponent(Plotly);\r\n\r\n// class App extends Component {\r\n//     constructor() {\r\n//       super();\r\n//       this.state = {\r\n//         response: false,\r\n//         endpoint: \"http://127.0.0.1:4001\"\r\n//       };\r\n//     }\r\n//   componentDidMount() {\r\n//       const { endpoint } = this.state;\r\n//       const socket = socketIOClient(endpoint);\r\n//       socket.on(\"FromAPI\", updatedTemperatures => this.setState({ response: updatedTemperatures }));\r\n//     }\r\n//   render() {\r\n//       const { response } = this.state;\r\n//       return (\r\n//         <div style={{ textAlign: \"center\" }}>\r\n//           {response ?\r\n//               response.map((obj)=>{\r\n//                 return <p key={obj.time}>time : {obj.time}</p>\r\n//               })\r\n//           : <p>Loading...</p>}\r\n//         </div>\r\n//       );\r\n//     }\r\n//   }\r\n//   export default App;\r\n\r\n\r\n\r\n// TOMAR DE AQUI EL PLOT\r\n\r\n\r\n\r\n\r\n//   import React, {useEffect,useState} from 'react';\r\n\r\n\r\n// export default function Chart() {\r\n\r\n//     const [temperatures, setTemperatures] = useState([]);\r\n//     const [power, setPower] = useState([]);\r\n\r\n//     useEffect(()=>{\r\n//       fetchData();\r\n//     },[])\r\n\r\n\r\n//     const fetchData = async () =>{\r\n//       //here Im fetching data from Express server specified endpoint\r\n//       const data = await fetch(\"/data\");\r\n//       const _data = await data.json();\r\n//       setTemperatures(_data.temperature.values);\r\n//       setPower(_data.power.values)\r\n//     }\r\n\r\n//     const makeAxis = (rawData) =>{\r\n//         const xAxis = rawData.map((each)=>(\r\n//             each.time\r\n//         ))\r\n//         const yAxis = rawData.map((each)=>(\r\n//             each.value\r\n//         ))\r\n//         const plotData = [xAxis,yAxis]\r\n\r\n//         return plotData;\r\n//     }\r\n\r\n\r\n//     return (\r\n//         <div>\r\n//             <Plot\r\n//                 data={[\r\n//                     {\r\n//                         type:'scatter',\r\n//                         mode:'lines',\r\n//                         x:makeAxis(temperatures)[0],\r\n//                         y:makeAxis(temperatures)[1]\r\n//                     }\r\n//                 ]}\r\n//             />\r\n//             <Plot\r\n//                 data={[\r\n//                     {\r\n//                         type:'scatter',\r\n//                         mode:'lines',\r\n//                         x:makeAxis(power)[0],\r\n//                         y:makeAxis(power)[1]\r\n//                     }\r\n//                 ]}\r\n//             />\r\n//         </div>\r\n//     )\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}