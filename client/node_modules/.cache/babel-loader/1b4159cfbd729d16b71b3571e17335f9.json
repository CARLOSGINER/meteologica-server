{"ast":null,"code":"import _slicedToArray from\"C:/Users/CARLOS/Documents/React_apps/meteologica_app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import socketIOClient from\"socket.io-client\";import Plotly from'plotly.js-basic-dist';import createPlotlyComponent from'react-plotly.js/factory';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Plot=createPlotlyComponent(Plotly);var ENDPOINT=\"http://127.0.0.1:4001\";// const plotGlobalLayout = {}\nvar globalColor='#111d2b';function App(_ref){var getLastTemp=_ref.getLastTemp,getLastPower=_ref.getLastPower;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),temperatures=_useState2[0],setTemperatures=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),power=_useState4[0],setPower=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),onLight=_useState6[0],setOnLight=_useState6[1];useEffect(function(){var socket=socketIOClient(ENDPOINT);socket.on(\"FromAPI\",function(resp){setTemperatures(resp.updatedTemperatures);setPower(resp.updatedPowers);setOnLight(true);});socket.on(\"disconnect\",function(){setOnLight(false);});},[]);var makeAxis=function makeAxis(rawData){var xAxis=rawData.map(function(each){return each.time;});var yAxis=rawData.map(function(each){return each.value;});var plotData=[xAxis,yAxis];return plotData;};var tempsInCelsius=function tempsInCelsius(kelvinTemperatures){var convertedTemperatures=kelvinTemperatures.map(function(each){var celsius=each-273.15;return celsius;});return convertedTemperatures;};var toKW=function toKW(MWpowers){var KWpowers=MWpowers.map(function(each){return each*1000;});return KWpowers;};var plotReadyTemps=tempsInCelsius(makeAxis(temperatures)[1]);var plotReadyPowers=toKW(makeAxis(power)[1]);var lastTemperature=typeof plotReadyTemps[plotReadyTemps.length-1]===\"undefined\"?0:plotReadyTemps[plotReadyTemps.length-1];var lastPower=typeof plotReadyPowers[plotReadyPowers.length-1]===\"undefined\"?0:plotReadyPowers[plotReadyPowers.length-1];getLastTemp(lastTemperature.toFixed(2));getLastPower(lastPower.toFixed(2));return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:onLight?\"loader active\":\"loader\",children:onLight?/*#__PURE__*/_jsx(\"p\",{children:\"Connected! receiving data\"}):/*#__PURE__*/_jsx(\"p\",{children:\"Disconnected...\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"charts\",children:[/*#__PURE__*/_jsx(Plot,{data:[{type:'scatter',mode:'lines',x:makeAxis(temperatures)[0],y:tempsInCelsius(makeAxis(temperatures)[1])}],layout:{title:'Temperature',font:{color:'rgb(179, 179, 179)'},xaxis:{title:'Time',titlefont:{color:'white'},tickfont:{color:'white'},tickmode:'linear',dtick:12,tickformat:'%M'},yaxis:{title:'Temp (CÂ°)',titlefont:{color:'white'},tickfont:{color:'white'}},paper_bgcolor:globalColor,plot_bgcolor:globalColor}}),/*#__PURE__*/_jsx(Plot,{data:[{type:'scatter',mode:'lines',x:makeAxis(power)[0],y:toKW(makeAxis(power)[1])}],layout:{title:'Power',font:{color:'rgb(179, 179, 179)'},xaxis:{title:'Time',titlefont:{color:'white'},tickfont:{color:'white'},tickmode:'linear',dtick:12,tickformat:'%M'},yaxis:{title:'Power (KW)',titlefont:{color:'white'},tickfont:{color:'white'}},paper_bgcolor:globalColor,plot_bgcolor:globalColor}})]})]});}export default App;","map":{"version":3,"sources":["C:/Users/carlos/documents/react_apps/meteologica_app/client/src/components/Chart.js"],"names":["React","useState","useEffect","socketIOClient","Plotly","createPlotlyComponent","Plot","ENDPOINT","globalColor","App","getLastTemp","getLastPower","temperatures","setTemperatures","power","setPower","onLight","setOnLight","socket","on","resp","updatedTemperatures","updatedPowers","makeAxis","rawData","xAxis","map","each","time","yAxis","value","plotData","tempsInCelsius","kelvinTemperatures","convertedTemperatures","celsius","toKW","MWpowers","KWpowers","plotReadyTemps","plotReadyPowers","lastTemperature","length","lastPower","toFixed","type","mode","x","y","title","font","color","xaxis","titlefont","tickfont","tickmode","dtick","tickformat","yaxis","paper_bgcolor","plot_bgcolor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport Plotly from 'plotly.js-basic-dist';\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\n\r\nconst Plot = createPlotlyComponent(Plotly);\r\nconst ENDPOINT = \"http://127.0.0.1:4001\";\r\n// const plotGlobalLayout = {}\r\nconst globalColor = '#111d2b'\r\n\r\n\r\nfunction App({getLastTemp,getLastPower}) {\r\n\r\n    const [temperatures, setTemperatures] = useState([]);\r\n    const [power, setPower] = useState([]);\r\n    const [onLight, setOnLight] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        const socket = socketIOClient(ENDPOINT);\r\n        socket.on(\"FromAPI\", resp => {\r\n            setTemperatures(resp.updatedTemperatures);\r\n            setPower(resp.updatedPowers);\r\n            setOnLight(true);\r\n        });\r\n        socket.on(\"disconnect\", () => {\r\n            setOnLight(false);\r\n          });\r\n    }, []);\r\n\r\n\r\n    const makeAxis = (rawData) =>{\r\n        const xAxis = rawData.map((each)=>(\r\n            each.time\r\n        ))\r\n        const yAxis = rawData.map((each)=>(\r\n            each.value\r\n        ))\r\n\r\n        const plotData = [xAxis,yAxis]\r\n\r\n        return plotData;\r\n    }\r\n\r\n    const tempsInCelsius =(kelvinTemperatures) =>{\r\n        const convertedTemperatures = kelvinTemperatures.map(each=>{\r\n            const celsius = each - 273.15\r\n            return (celsius)\r\n        })\r\n        return convertedTemperatures\r\n    }\r\n\r\n    const toKW = (MWpowers) =>{\r\n        const KWpowers= MWpowers.map(each=>{\r\n            return each*1000\r\n        })\r\n        return KWpowers\r\n    }\r\n\r\n    let plotReadyTemps = tempsInCelsius(makeAxis(temperatures)[1])\r\n    let plotReadyPowers = toKW(makeAxis(power)[1])\r\n    let lastTemperature = typeof plotReadyTemps[plotReadyTemps.length-1] === \"undefined\"? 0 : plotReadyTemps[plotReadyTemps.length-1]  ; \r\n    let lastPower = typeof plotReadyPowers[plotReadyPowers.length-1] === \"undefined\"? 0 : plotReadyPowers[plotReadyPowers.length-1]; \r\n    getLastTemp(lastTemperature.toFixed(2))\r\n    getLastPower(lastPower.toFixed(2))\r\n\r\n\r\n  return (\r\n\r\n    <>\r\n\r\n        <div className={onLight?\"loader active\":\"loader\"}>\r\n            {onLight?<p>Connected! receiving data</p>:<p>Disconnected...</p>}\r\n        </div>\r\n\r\n        <div className=\"charts\">\r\n\r\n            <Plot\r\n                data={[\r\n                    {\r\n                        type:'scatter',\r\n                        mode:'lines',\r\n                        x:makeAxis(temperatures)[0],\r\n                        y:tempsInCelsius(makeAxis(temperatures)[1])\r\n                    }\r\n                ]}\r\n\r\n                layout={{\r\n                    title:'Temperature',\r\n                    font:{\r\n                        color:'rgb(179, 179, 179)'\r\n                    },\r\n                    xaxis:{\r\n                        title:'Time',\r\n                        titlefont:{color:'white'},\r\n                        tickfont:{color:'white'},\r\n                        tickmode:'linear',\r\n                        dtick:12,\r\n                        tickformat:'%M'\r\n                    },\r\n                    yaxis:{\r\n                        title:'Temp (CÂ°)',\r\n                        titlefont:{color:'white'},\r\n                        tickfont:{color:'white'}\r\n                    },\r\n                    paper_bgcolor:globalColor,\r\n                    plot_bgcolor:globalColor,\r\n                }}\r\n            />\r\n            <Plot\r\n                data={[\r\n                    {\r\n                        type:'scatter',\r\n                        mode:'lines',\r\n                        x:makeAxis(power)[0],\r\n                        y:toKW(makeAxis(power)[1]),\r\n                    }\r\n                ]}\r\n                layout={{\r\n                    title:'Power',\r\n                    font:{\r\n                        color:'rgb(179, 179, 179)'\r\n                    },\r\n                    xaxis:{\r\n                        title:'Time',\r\n                        titlefont:{color:'white'},\r\n                        tickfont:{color:'white'},\r\n                        tickmode:'linear',\r\n                        dtick:12,\r\n                        tickformat:'%M'\r\n                    },\r\n                    yaxis:{\r\n                        title:'Power (KW)',\r\n                        titlefont:{color:'white'},\r\n                        tickfont:{color:'white'}\r\n                    },\r\n                    paper_bgcolor:globalColor,\r\n                    plot_bgcolor:globalColor,\r\n\r\n                }}\r\n            />\r\n        </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}