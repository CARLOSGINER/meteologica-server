{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carlos\\\\documents\\\\react_apps\\\\meteologica_app\\\\client\\\\src\\\\components\\\\Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://127.0.0.1:4001\";\n\nfunction App() {\n  _s();\n\n  const [response, setResponse] = useState([]);\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    socket.on(\"FromAPI\", updatedTemperature => {\n      setResponse(updatedTemperature);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: response.map(each => {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: each.time\n      }, each.time, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 20\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"SpAZrutwi0PdOrMSbhfjoxpt2XU=\");\n\n_c = App;\nexport default App; // FUNCIONANDO EN COMPONENTE CLASE\n// import React, { Component } from \"react\";\n// // import Plotly from 'plotly.js-basic-dist';\n// // import createPlotlyComponent from 'react-plotly.js/factory';\n// import socketIOClient from \"socket.io-client\";\n// const Plot = createPlotlyComponent(Plotly);\n// class App extends Component {\n//     constructor() {\n//       super();\n//       this.state = {\n//         response: false,\n//         endpoint: \"http://127.0.0.1:4001\"\n//       };\n//     }\n//   componentDidMount() {\n//       const { endpoint } = this.state;\n//       const socket = socketIOClient(endpoint);\n//       socket.on(\"FromAPI\", updatedTemperatures => this.setState({ response: updatedTemperatures }));\n//     }\n//   render() {\n//       const { response } = this.state;\n//       return (\n//         <div style={{ textAlign: \"center\" }}>\n//           {response ?\n//               response.map((obj)=>{\n//                 return <p key={obj.time}>time : {obj.time}</p>\n//               })\n//           : <p>Loading...</p>}\n//         </div>\n//       );\n//     }\n//   }\n//   export default App;\n// TOMAR DE AQUI EL PLOT\n//   import React, {useEffect,useState} from 'react';\n// export default function Chart() {\n//     const [temperatures, setTemperatures] = useState([]);\n//     const [power, setPower] = useState([]);\n//     useEffect(()=>{\n//       fetchData();\n//     },[])\n//     const fetchData = async () =>{\n//       //here Im fetching data from Express server specified endpoint \n//       const data = await fetch(\"/data\"); \n//       const _data = await data.json();\n//       setTemperatures(_data.temperature.values);\n//       setPower(_data.power.values)\n//     }\n//     const makeAxis = (rawData) =>{\n//         const xAxis = rawData.map((each)=>(\n//             each.time\n//         ))\n//         const yAxis = rawData.map((each)=>(\n//             each.value\n//         ))\n//         const plotData = [xAxis,yAxis]\n//         return plotData;\n//     } \n//     return (\n//         <div>\n//             <Plot\n//                 data={[\n//                     {\n//                         type:'scatter',\n//                         mode:'lines',\n//                         x:makeAxis(temperatures)[0],\n//                         y:makeAxis(temperatures)[1]\n//                     }\n//                 ]}\n//             />\n//             <Plot\n//                 data={[\n//                     {\n//                         type:'scatter',\n//                         mode:'lines',\n//                         x:makeAxis(power)[0],\n//                         y:makeAxis(power)[1]\n//                     }\n//                 ]}\n//             />\n//         </div>\n//     )\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/carlos/documents/react_apps/meteologica_app/client/src/components/Chart.js"],"names":["React","useState","useEffect","socketIOClient","ENDPOINT","App","response","setResponse","socket","on","updatedTemperature","map","each","time"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AACA,MAAMC,QAAQ,GAAG,uBAAjB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,MAAM,GAAGL,cAAc,CAACC,QAAD,CAA7B;AACAI,IAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAqBC,kBAAkB,IAAI;AACzCH,MAAAA,WAAW,CAACG,kBAAD,CAAX;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;AASA,sBACE;AAAA,cACIJ,QAAQ,CAACK,GAAT,CAAcC,IAAD,IAAU;AACnB,0BAAO;AAAA,kBAAoBA,IAAI,CAACC;AAAzB,SAAQD,IAAI,CAACC,IAAb;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFD;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GApBQR,G;;KAAAA,G;AAqBT,eAAeA,GAAf,C,CAqBA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nconst ENDPOINT = \"http://127.0.0.1:4001\";\r\n\r\nfunction App() {\r\n  const [response, setResponse] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const socket = socketIOClient(ENDPOINT);\r\n    socket.on(\"FromAPI\", updatedTemperature => {\r\n      setResponse(updatedTemperature);\r\n    });\r\n  }, []);\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      { response.map((each) => {\r\n            return <p key={each.time}>{each.time}</p>;\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// FUNCIONANDO EN COMPONENTE CLASE\r\n\r\n\r\n// import React, { Component } from \"react\";\r\n// // import Plotly from 'plotly.js-basic-dist';\r\n// // import createPlotlyComponent from 'react-plotly.js/factory';\r\n// import socketIOClient from \"socket.io-client\";\r\n\r\n// const Plot = createPlotlyComponent(Plotly);\r\n\r\n// class App extends Component {\r\n//     constructor() {\r\n//       super();\r\n//       this.state = {\r\n//         response: false,\r\n//         endpoint: \"http://127.0.0.1:4001\"\r\n//       };\r\n//     }\r\n//   componentDidMount() {\r\n//       const { endpoint } = this.state;\r\n//       const socket = socketIOClient(endpoint);\r\n//       socket.on(\"FromAPI\", updatedTemperatures => this.setState({ response: updatedTemperatures }));\r\n//     }\r\n//   render() {\r\n//       const { response } = this.state;\r\n//       return (\r\n//         <div style={{ textAlign: \"center\" }}>\r\n//           {response ?\r\n//               response.map((obj)=>{\r\n//                 return <p key={obj.time}>time : {obj.time}</p>\r\n//               })\r\n//           : <p>Loading...</p>}\r\n//         </div>\r\n//       );\r\n//     }\r\n//   }\r\n//   export default App;\r\n\r\n\r\n\r\n// TOMAR DE AQUI EL PLOT\r\n\r\n\r\n\r\n\r\n//   import React, {useEffect,useState} from 'react';\r\n\r\n\r\n// export default function Chart() {\r\n\r\n//     const [temperatures, setTemperatures] = useState([]);\r\n//     const [power, setPower] = useState([]);\r\n\r\n//     useEffect(()=>{\r\n//       fetchData();\r\n//     },[])\r\n\r\n  \r\n//     const fetchData = async () =>{\r\n//       //here Im fetching data from Express server specified endpoint \r\n//       const data = await fetch(\"/data\"); \r\n//       const _data = await data.json();\r\n//       setTemperatures(_data.temperature.values);\r\n//       setPower(_data.power.values)\r\n//     }\r\n\r\n//     const makeAxis = (rawData) =>{\r\n//         const xAxis = rawData.map((each)=>(\r\n//             each.time\r\n//         ))\r\n//         const yAxis = rawData.map((each)=>(\r\n//             each.value\r\n//         ))\r\n//         const plotData = [xAxis,yAxis]\r\n\r\n//         return plotData;\r\n//     } \r\n\r\n\r\n//     return (\r\n//         <div>\r\n//             <Plot\r\n//                 data={[\r\n//                     {\r\n//                         type:'scatter',\r\n//                         mode:'lines',\r\n//                         x:makeAxis(temperatures)[0],\r\n//                         y:makeAxis(temperatures)[1]\r\n//                     }\r\n//                 ]}\r\n//             />\r\n//             <Plot\r\n//                 data={[\r\n//                     {\r\n//                         type:'scatter',\r\n//                         mode:'lines',\r\n//                         x:makeAxis(power)[0],\r\n//                         y:makeAxis(power)[1]\r\n//                     }\r\n//                 ]}\r\n//             />\r\n//         </div>\r\n//     )\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}