{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carlos\\\\documents\\\\react_apps\\\\meteologica_app\\\\client\\\\src\\\\components\\\\Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport Plotly from 'plotly.js-basic-dist';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Plot = createPlotlyComponent(Plotly);\n_c = Plot;\nconst ENDPOINT = \"http://127.0.0.1:4001\"; // const plotGlobalLayout = {}\n\nconst globalColor = '#111d2b';\n\nfunction App(_ref) {\n  _s();\n\n  let {\n    getLastTemp\n  } = _ref;\n  const [temperatures, setTemperatures] = useState([]);\n  const [power, setPower] = useState([]);\n  const [onLight, setOnLight] = useState(false);\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    socket.on(\"FromAPI\", resp => {\n      setTemperatures(resp.updatedTemperatures);\n      setPower(resp.updatedPowers);\n      setOnLight(true);\n    });\n  }, []);\n\n  const makeAxis = rawData => {\n    const xAxis = rawData.map(each => each.time);\n    const yAxis = rawData.map(each => each.value);\n    const plotData = [xAxis, yAxis];\n    return plotData;\n  };\n\n  const tempsInCelsius = kelvinTemperatures => {\n    const convertedTemperatures = kelvinTemperatures.map(each => {\n      const celsius = each - 273.15;\n      return celsius;\n    });\n    return convertedTemperatures;\n  };\n\n  const toKW = MWpowers => {\n    const KWpowers = MWpowers.map(each => {\n      return each * 1000;\n    });\n    return KWpowers;\n  };\n\n  let plotReadyTemps;\n  let lastTemperature;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [plotReadyTemps = tempsInCelsius(makeAxis(temperatures)[1]), lastTemperature = plotReadyTemps[plotReadyTemps.length - 1], getLastTemp(lastTemperature), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: onLight ? \"loader active\" : \"loader\",\n      children: onLight ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Connected! receiving data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 55\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"charts\",\n      children: [/*#__PURE__*/_jsxDEV(Plot, {\n        data: [{\n          type: 'scatter',\n          mode: 'lines',\n          x: makeAxis(temperatures)[0],\n          y: tempsInCelsius(makeAxis(temperatures)[1])\n        }],\n        layout: {\n          title: 'Temperature',\n          font: {\n            color: 'rgb(179, 179, 179)'\n          },\n          xaxis: {\n            title: 'Time',\n            titlefont: {\n              color: 'white'\n            },\n            tickfont: {\n              color: 'white'\n            },\n            tickmode: 'linear',\n            dtick: 12,\n            tickformat: '%M'\n          },\n          yaxis: {\n            title: 'Temp (CÂ°)',\n            titlefont: {\n              color: 'white'\n            },\n            tickfont: {\n              color: 'white'\n            }\n          },\n          paper_bgcolor: globalColor,\n          plot_bgcolor: globalColor\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Plot, {\n        data: [{\n          type: 'scatter',\n          mode: 'lines',\n          x: makeAxis(power)[0],\n          y: toKW(makeAxis(power)[1])\n        }],\n        layout: {\n          title: 'Power',\n          font: {\n            color: 'rgb(179, 179, 179)'\n          },\n          xaxis: {\n            title: 'Time',\n            titlefont: {\n              color: 'white'\n            },\n            tickfont: {\n              color: 'white'\n            },\n            tickmode: 'linear',\n            dtick: 12,\n            tickformat: '%M'\n          },\n          yaxis: {\n            title: 'Power (KW)',\n            titlefont: {\n              color: 'white'\n            },\n            tickfont: {\n              color: 'white'\n            }\n          },\n          paper_bgcolor: globalColor,\n          plot_bgcolor: globalColor\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"jgKKQ1xo31WQ5GmnARJpyu8xpUY=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Plot\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/carlos/documents/react_apps/meteologica_app/client/src/components/Chart.js"],"names":["React","useState","useEffect","socketIOClient","Plotly","createPlotlyComponent","Plot","ENDPOINT","globalColor","App","getLastTemp","temperatures","setTemperatures","power","setPower","onLight","setOnLight","socket","on","resp","updatedTemperatures","updatedPowers","makeAxis","rawData","xAxis","map","each","time","yAxis","value","plotData","tempsInCelsius","kelvinTemperatures","convertedTemperatures","celsius","toKW","MWpowers","KWpowers","plotReadyTemps","lastTemperature","length","type","mode","x","y","title","font","color","xaxis","titlefont","tickfont","tickmode","dtick","tickformat","yaxis","paper_bgcolor","plot_bgcolor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport Plotly from 'plotly.js-basic-dist';\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\n\r\nconst Plot = createPlotlyComponent(Plotly);\r\nconst ENDPOINT = \"http://127.0.0.1:4001\";\r\n// const plotGlobalLayout = {}\r\nconst globalColor = '#111d2b'\r\n\r\n\r\nfunction App({getLastTemp}) {\r\n\r\n    const [temperatures, setTemperatures] = useState([]);\r\n    const [power, setPower] = useState([]);\r\n    const [onLight, setOnLight] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        const socket = socketIOClient(ENDPOINT);\r\n        socket.on(\"FromAPI\", resp => {\r\n            setTemperatures(resp.updatedTemperatures);\r\n            setPower(resp.updatedPowers);\r\n            setOnLight(true)\r\n        });\r\n    }, []);\r\n\r\n\r\n    const makeAxis = (rawData) =>{\r\n        const xAxis = rawData.map((each)=>(\r\n            each.time\r\n        ))\r\n        const yAxis = rawData.map((each)=>(\r\n            each.value\r\n        ))\r\n\r\n        const plotData = [xAxis,yAxis]\r\n\r\n        return plotData;\r\n    }\r\n\r\n    const tempsInCelsius =(kelvinTemperatures) =>{\r\n        const convertedTemperatures = kelvinTemperatures.map(each=>{\r\n            const celsius = each - 273.15\r\n            return (celsius)\r\n        })\r\n        return convertedTemperatures\r\n    }\r\n\r\n    const toKW = (MWpowers) =>{\r\n        const KWpowers= MWpowers.map(each=>{\r\n            return each*1000\r\n        })\r\n        return KWpowers\r\n    }\r\n\r\n    let plotReadyTemps;\r\n    let lastTemperature;\r\n\r\n  return (\r\n\r\n    <>\r\n        {plotReadyTemps = tempsInCelsius(makeAxis(temperatures)[1])}\r\n        {lastTemperature = plotReadyTemps[plotReadyTemps.length-1]}\r\n        {getLastTemp(lastTemperature)}\r\n\r\n\r\n        <div className={onLight?\"loader active\":\"loader\"}>\r\n            {onLight?<p>Connected! receiving data</p>:<p>loading...</p>}\r\n        </div>\r\n\r\n        <div className=\"charts\">\r\n\r\n            <Plot\r\n                data={[\r\n                    {\r\n                        type:'scatter',\r\n                        mode:'lines',\r\n                        x:makeAxis(temperatures)[0],\r\n                        y:tempsInCelsius(makeAxis(temperatures)[1])\r\n                    }\r\n                ]}\r\n\r\n                layout={{\r\n                    title:'Temperature',\r\n                    font:{\r\n                        color:'rgb(179, 179, 179)'\r\n                    },\r\n                    xaxis:{\r\n                        title:'Time',\r\n                        titlefont:{color:'white'},\r\n                        tickfont:{color:'white'},\r\n                        tickmode:'linear',\r\n                        dtick:12,\r\n                        tickformat:'%M'\r\n                    },\r\n                    yaxis:{\r\n                        title:'Temp (CÂ°)',\r\n                        titlefont:{color:'white'},\r\n                        tickfont:{color:'white'}\r\n                    },\r\n                    paper_bgcolor:globalColor,\r\n                    plot_bgcolor:globalColor,\r\n                }}\r\n            />\r\n            <Plot\r\n                data={[\r\n                    {\r\n                        type:'scatter',\r\n                        mode:'lines',\r\n                        x:makeAxis(power)[0],\r\n                        y:toKW(makeAxis(power)[1]),\r\n                    }\r\n                ]}\r\n                layout={{\r\n                    title:'Power',\r\n                    font:{\r\n                        color:'rgb(179, 179, 179)'\r\n                    },\r\n                    xaxis:{\r\n                        title:'Time',\r\n                        titlefont:{color:'white'},\r\n                        tickfont:{color:'white'},\r\n                        tickmode:'linear',\r\n                        dtick:12,\r\n                        tickformat:'%M'\r\n                    },\r\n                    yaxis:{\r\n                        title:'Power (KW)',\r\n                        titlefont:{color:'white'},\r\n                        tickfont:{color:'white'}\r\n                    },\r\n                    paper_bgcolor:globalColor,\r\n                    plot_bgcolor:globalColor,\r\n\r\n                }}\r\n            />\r\n        </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}